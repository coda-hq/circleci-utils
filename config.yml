version: 2.1

description: |
  A set of utilities for controlling CircleCI workflows & builds.

executors:
  basic:
    resource_class: small
    docker:
      - image: circleci/buildpack-deps:buster-curl

commands:
  cancel-older-awaiting-approvals:
    description: |
      Cancel all older pipelines waiting on manual approval.
      Depends on jq being present.
    parameters:
      token:
        description: |
          The env var containing CircleCI API token that can read builds for the project (either a user or project API token will work).
          Pass this as a literal string such as `$CIRCLE_TOKEN`.
          Do not paste the actual token into your configuration.
        type: string
      vcs:
        description: |
          Defaults to "gh", but allows other version control systems.
        type: string
        default: gh
    steps:
      - run:
          name: Cancel older pipelines waiting on manual approval.
          command: |
            set -eo pipefail

            BASE_URL="https://circleci.com/api/v2"
            TOKEN="circle-token=<< parameters.token >>"

            CURRENT_WORKFLOW=$(curl -s -H "Accept: application/json" "${BASE_URL}/workflow/${CIRCLE_WORKFLOW_ID}?${TOKEN}")
            CURRENT_WORKFLOW_TIMESTAMP=$(echo $CURRENT_WORKFLOW | jq -r ".created_at")
            echo "Current workflow start time: ${CURRENT_WORKFLOW_TIMESTAMP}"

            PROJECT_SLUG="project/<< parameters.vcs >>%2F${CIRCLE_PROJECT_USERNAME}%2F${CIRCLE_PROJECT_REPONAME}"
            PIPELINE_IDS=$(curl -s -H "Accept: application/json" "${BASE_URL}/${PROJECT_SLUG}/pipeline?${TOKEN}" | jq -r ".items[].id")

            for PIPELINE_ID in $PIPELINE_IDS; do
              WORKFLOW=$(curl -s -H "Accept: application/json" "${BASE_URL}/pipeline/${PIPELINE_ID}/workflow?${TOKEN}" | jq ".items[0]")

              WORKFLOW_ID=$(echo $WORKFLOW | jq -r ".id")
              WORKFLOW_STATUS=$(echo $WORKFLOW | jq -r ".status")
              WORKFLOW_CREATION_TIMESTAMP=$(echo $WORKFLOW | jq -r ".created_at")

              echo "Workflow data: ${WORKFLOW_ID}, ${WORKFLOW_STATUS}, ${WORKFLOW_CREATION_TIMESTAMP}"

              if [[ $WORKFLOW_CREATION_TIMESTAMP < $CURRENT_WORKFLOW_TIMESTAMP && "$WORKFLOW_STATUS" == "on_hold" ]]; then
                echo "Canceling older workflow waiting for manual approval: ${WORKFLOW_ID}"
                curl -s -X POST -H "Accept: application/json" "${BASE_URL}/workflow/${WORKFLOW_ID}/cancel?${TOKEN}"
              fi
            done
  slack-notify-waiting-for-approval:
    description: |
      Notifies the current workflow owner that their workflow is pending approval to proceed.
      Depends on jq being present.

      Setup:
        1. Create Coda document with a table containing columns `circleci alias` (ex: github username) and `email`, and populate this table with information for each github user.
        3. Find the docId, tableId, and columnIds for the circleci user alias and email columnIds.
        4. Create a Coda API token for this document at https://coda.io/account - limit the token to read access to the target table.
        5. Setup a Slack Bot account with scopes `users:read`, `users:read.email`, and `chat:write`.
        6. Configure orb based on required args
    parameters:
      CODA_USER_ROSTER_TABLE_URL:
        description: |
          Fully qualified API URL to a table containing CIRCLECI_USERNAMEs to email aliases.    Must be of the form
          https://coda.io/apis/v1/docs/<DOCID>/tables/<TABLEID>/rows.
        type: string
        default: https://staging.coda.io/apis/v1/docs/s2i6oFeghW/tables/grid-QGyaiXZDwu/rows
      CODA_API_TOKEN:
        description: |
          Env var of a token granted read access to the CODA_USER_ROSTER_TABLE_URL document.
        type: string
      CODA_CIRCLECI_USER_NAME_COL:
        description: |
          Coda columnId of the column storing the CircleCI username.
        type: string
        default: c-6ni4kHGNwE
      CODA_CIRCLECI_USER_ALIAS_COL:
        description: |
          Coda columnId of the column storing the user alias (when using EMAIL_DOMAIN), or fully qualified email.
        type: string
        default: c-26If9Zttyp
      EMAIL_DOMAIN:
        description: |
          Optional email domain for users within the workspace.   Must be specified if user aliases are not fully qualified.
        type: string
        default: coda.io
      SLACK_BOT_TOKEN:
        type: string
        description: |
          Token used by Slack bot application.   Must have scopes `users:read`, `users:read.email`, and `chat:write`.
      vcs:
        description: |
          Defaults to "gh", but allows other version control systems.
        type: string
        default: gh
    steps:
      - run:
          name: Fetch Slack Handle For Github Handle
          command: |
            set -eo pipefail

            USER_ALIAS=$(curl -s -H "Authorization: Bearer << parameters.CODA_API_TOKEN >>" \
              -G --data-urlencode "query=<< parameters.CODA_CIRCLECI_USER_NAME_COL >>:\"${CIRCLE_USERNAME}\"" \
              '<< parameters.CODA_USER_ROSTER_TABLE_URL >>' \
              | jq '.items[0].values."<< parameters.CODA_CIRCLECI_USER_ALIAS_COL >>"' | tr -d '"')
            USER_EMAIL=$([[ "${USER_ALIAS}" == *@* ]] && echo "$USER_ALIAS" || echo "${USER_ALIAS}@<< parameters.EMAIL_DOMAIN >>")
            SLACK_USER_ID=$(curl -s -H "Authorization: Bearer << parameters.SLACK_BOT_TOKEN >>" \
              https://slack.com/api/users.lookupByEmail?email=${USER_EMAIL} \
              | jq '.user.id' | tr -d '"')

            curl -X POST -H "Authorization: Bearer << parameters.SLACK_BOT_TOKEN >>" \
              -H "Content-Type: application/json" -d \
              "{ \
                \"channel\": \"${SLACK_USER_ID}\", \
                \"attachments\": [ \
                  { \
                    \"text\": \"Pending Approval for ${CIRCLE_PROJECT_REPONAME} push (${CIRCLE_USERNAME})\", \
                    \"fields\": [ \
                      { \
                        \"title\": \"Project\", \
                        \"value\": \"${CIRCLE_PROJECT_REPONAME}\", \
                        \"short\": true \
                      }, \
                      { \
                        \"title\": \"Job Number\", \
                        \"value\": \"${CIRCLE_BUILD_NUM}\", \
                        \"short\": true \
                      } \
                    ], \
                    \"actions\": [ \
                      { \
                        \"type\": \"button\", \
                        \"text\": \"Visit Workflow\", \
                        \"url\": \"https://circleci.com/workflow-run/${CIRCLE_WORKFLOW_ID}\" \
                      } \
                    ], \
                    \"color\": \"#f46a54\" \
                  } \
                ] \
              }" \
              'https://slack.com/api/chat.postMessage'
  enrich-username-with-email:
    description: |
      Update the circleci triggered username with their coda email.

    parameters:
      CODA_USER_ROSTER_TABLE_URL:
        description: |
          Fully qualified API URL to a table containing CIRCLECI_USERNAMEs to email aliases.    Must be of the form
          https://coda.io/apis/v1/docs/<DOCID>/tables/<TABLEID>/rows.
        type: string
        default: https://staging.coda.io/apis/v1/docs/s2i6oFeghW/tables/grid-QGyaiXZDwu/rows
      CODA_API_TOKEN:
        description: |
          Env var of a token granted read access to the CODA_USER_ROSTER_TABLE_URL document.
        type: string
      CODA_CIRCLECI_USER_NAME_COL:
        description: |
          Coda columnId of the column storing the CircleCI username.
        type: string
        default: c-6ni4kHGNwE
      CODA_CIRCLECI_USER_ALIAS_COL:
        description: |
          Coda columnId of the column storing the user alias (when using EMAIL_DOMAIN), or fully qualified email.
        type: string
        default: c-26If9Zttyp
      EMAIL_DOMAIN:
        description: |
          Optional email domain for users within the workspace.   Must be specified if user aliases are not fully qualified.
        type: string
        default: coda.io
        
    steps:
      - run:
          name: Fetch Coda Email From Github Handle
          command: |
            set -eo pipefail

            USER_ALIAS=$(curl -s -H "Authorization: Bearer << parameters.CODA_API_TOKEN >" \
              -G --data-urlencode "query=<< parameters.CODA_CIRCLECI_USER_NAME_COL >>:\"${CIRCLE_USERNAME}\"" \
              '<< parameters.CODA_USER_ROSTER_TABLE_URL >>' \
              | jq '.items[0].values."<< parameters.CODA_CIRCLECI_USER_ALIAS_COL >>"' | tr -d '"')
            USER_EMAIL=$([[ "${USER_ALIAS}" == *@* ]] && echo "$USER_ALIAS" || echo "${USER_ALIAS}@<< parameters.EMAIL_DOMAIN >>")
            CIRCLECI_USERNAME="${CIRCLECI_USERNAME (on behalf-of ${COMMIT_USER_EMAIL}}"

jobs:
  cancel-older-awaiting-approvals:
    description: |
      Cancel all older pipelines waiting on manual approval.
      Depends on jq being present.
    parameters:
      token:
        description: |
          The env var containing CircleCI API token that can read builds for the project (either a user or project API token will work).
          Pass this as a literal string such as `$CIRCLE_TOKEN`.
          Do not paste the actual token into your configuration.
        type: string
      vcs:
        description: |
          Defaults to "gh", but allows other version control systems.
        type: string
        default: gh
    executor: basic
    steps:
      - cancel-older-awaiting-approvals:
          token: << parameters.token >>
          vcs: << parameters.vcs >>
  slack-notify-waiting-for-approval:
    description: |
      Notifies the current workflow owner that their workflow is pending approval to proceed.
      Depends on jq being present.

      Setup:
        1. Create Coda document with a table containing columns `circleci alias` (ex: github username) and `email`, and populate this table with information for each github user.
        3. Find the docId, tableId, and columnIds for the circleci user alias and email columnIds.
        4. Create a Coda API token for this document at https://coda.io/account - limit the token to read access to the target table.
        5. Setup a Slack Bot account with scopes `users:read`, `users:read.email`, and `chat:write`.
        6. Configure orb based on required args
    parameters:
      CODA_USER_ROSTER_TABLE_URL:
        description: |
          Fully qualified API URL to a table containing CIRCLECI_USERNAME to email aliases.    Must be of the form
          https://coda.io/apis/v1/docs/<DOCID>/tables/<TABLEID>/rows.
        type: string
        default: https://staging.coda.io/apis/v1/docs/s2i6oFeghW/tables/grid-QGyaiXZDwu/rows
      CODA_API_TOKEN:
        description: |
          Env var of a token granted read access to the CODA_USER_ROSTER_TABLE_URL document.
        type: string
      CODA_CIRCLECI_USER_NAME_COL:
        description: |
          Coda columnId of the column storing the CircelCI username (typically github alias).
        type: string
        default: c-6ni4kHGNwE
      CODA_CIRCLECI_USER_ALIAS_COL:
        description: |
          Coda columnId of the column storing the user alias (if using EMAIL_DOMAIN), or fully qualified email.
        type: string
        default: c-26If9Zttyp
      EMAIL_DOMAIN:
        description: |
          Optional email domain for users within the workspace.   Must be specified if user aliases are not fully qualified.
        type: string
        default: coda.io
      SLACK_BOT_TOKEN:
        type: string
        description: |
          Token used by Slack bot application.   Must have scopes `users:read`, `users:read.email`, and `chat:write`.
      vcs:
        description: |
          Defaults to "gh", but allows other version control systems.
        type: string
        default: gh
    executor: basic
    steps:
      - slack-notify-waiting-for-approval:
          CODA_API_TOKEN: << parameters.CODA_API_TOKEN >>
          CODA_CIRCLECI_USER_ALIAS_COL: << parameters.CODA_CIRCLECI_USER_ALIAS_COL >>
          CODA_CIRCLECI_USER_NAME_COL: << parameters.CODA_CIRCLECI_USER_NAME_COL >>
          CODA_USER_ROSTER_TABLE_URL: << parameters.CODA_USER_ROSTER_TABLE_URL >>
          EMAIL_DOMAIN: << parameters.EMAIL_DOMAIN >>
          SLACK_BOT_TOKEN: << parameters.SLACK_BOT_TOKEN >>
          vcs: << parameters.vcs >>
  enrich-username-with-email:
    description: |
    Retrieve the corresponding email of the committer. 
    Setup:
      1. Create Coda document with a table containing columns `circleci alias` (ex: github username) and `email`, and populate this table with information for each github user.
      3. Find the docId, tableId, and columnIds for the circleci user alias and email columnIds.
      4. Create a Coda API token for this document at https://coda.io/account - limit the token to read access to the target table.
      5. Configure orb based on required args
  parameters:
    CODA_USER_ROSTER_TABLE_URL:
      description: |
        Fully qualified API URL to a table containing CIRCLECI_USERNAME to email aliases.    Must be of the form
        https://coda.io/apis/v1/docs/<DOCID>/tables/<TABLEID>/rows.
      type: string
      default: https://staging.coda.io/apis/v1/docs/s2i6oFeghW/tables/grid-QGyaiXZDwu/rows
    CODA_API_TOKEN:
      description: |
        Env var of a token granted read access to the CODA_USER_ROSTER_TABLE_URL document.
      type: string
    CODA_CIRCLECI_USER_NAME_COL:
      description: |
        Coda columnId of the column storing the CircelCI username (typically github alias).
      type: string
      default: c-6ni4kHGNwE
    CODA_CIRCLECI_USER_ALIAS_COL:
      description: |
        Coda columnId of the column storing the user alias (if using EMAIL_DOMAIN), or fully qualified email.
      type: string
      default: c-26If9Zttyp
    EMAIL_DOMAIN:
      description: |
        Optional email domain for users within the workspace.   Must be specified if user aliases are not fully qualified.
      type: string
      default: coda.io
  executor: basic
  steps:
    - enrich-username-with-email:
        CODA_API_TOKEN: << parameters.CODA_API_TOKEN >>
        CODA_CIRCLECI_USER_ALIAS_COL: << parameters.CODA_CIRCLECI_USER_ALIAS_COL >>
        CODA_CIRCLECI_USER_NAME_COL: << parameters.CODA_CIRCLECI_USER_NAME_COL >>
        CODA_USER_ROSTER_TABLE_URL: << parameters.CODA_USER_ROSTER_TABLE_URL >>
        EMAIL_DOMAIN: << parameters.EMAIL_DOMAIN >>