description: Send build results to Opsgenie API, with detailed information
parameters:
  coda_user_roster_table_url:
    description: |
      Fully qualified API URL to a table containing CIRCLECI_USERNAMEs to email aliases.    Must be of the form
      https://coda.io/apis/v1/docs/<DOCID>/tables/<TABLEID>/rows.
    type: string
    default: https://coda.io/apis/v1/docs/CBRzjlr8md/tables/table-37x7Jsfrqx/rows
  coda_circleci_user_name_col:
    description: |
      Coda columnId of the column storing the CircleCI username in the coda_user_roster_table_url document.
    type: string
    default: c-HWxgJukgCs
  coda_github_col:
    description: |
      Coda columnId of the column storing the full name in the coda_user_roster_table_url document.
    type: string
    default: c-HWxgJukgCs
  coda_user_email_col:
    description: |
      Coda columnId of the column storing the Coda email in the coda_user_roster_table_url document.
    type: string
    default: c-l3XSvkG3vB
  endpoint:
    default: OPSGENIE_WEBHOOK
    description: Enter either your Full URL value that you copied in Opsgenie
      Integration Page
    type: env_var_name
  on_failure:
    default: false
    description: Failure information of circleci build
    type: boolean
  on_success:
    default: true
    description: Success information of circleci build
    type: boolean
  coda_prod_token:
    default: $CODA_PROD_TOKEN
    description: |
      Env var of a token granted read access to the coda_user_roster_table_url document.
    type: string
  email_domain:
    description: |
      Optional email domain for users within the workspace.   Must be specified if user aliases are not fully qualified.
    type: string
    default: coda.io
  circle_token:
    default: $CIRCLECI_TOKEN
    description: |
      Env var of a token granted read access to the CircleCI api
    type: string
steps:
- run:
    name: Set variables
    when: always
    command: |
      echo "export CODA_PROD_TOKEN=<<parameters.coda_prod_token>>" >> "$BASH_ENV"
      echo "export CIRCLECI_TOKEN=<<parameters.circle_token>>" >> "$BASH_ENV"
      echo "export EMAIL_DOMAIN=<<parameters.email_domain>>" >> "$BASH_ENV"
      echo "export CODA_CIRCLECI_USER_NAME_COL=<<parameters.coda_circleci_user_name_col>>" >> "$BASH_ENV"
      echo "export CODA_USER_EMAIL_COL=<<parameters.coda_user_email_col>>" >> $BASH_ENV
      echo "export CODA_GITHUB_COL=<<parameters.coda_github_col>>" >> $BASH_ENV
      echo "export CODA_USER_ROSTER_TABLE_URL=<<parameters.coda_user_roster_table_url>>" >> "$BASH_ENV"
- run:
    name: Fetch User Information
    when: on_fail
    command: <<include(scripts/fetch_user_handles.sh)>>
- when:
    condition: <<parameters.on_failure>>
    steps:
    - run:
        name: Get diff url
        command: <<include(scripts/get_lkg_hash.sh)>>
        when: on_fail
- run:
    command: |
      echo '{}' | jq '{
        "message": "[CircleCI] [#\(env.CIRCLE_PREVIOUS_BUILD_NUM)]: workflow \(env.CIRCLE_BRANCH) stage \(env.CIRCLE_STAGE) job \(env.CIRCLE_JOB)",
        "alias": "\(env.CIRCLE_PROJECT_REPONAME)/\(env.CIRCLE_BRANCH)#\(env.CIRCLE_JOB)",
        "description":"See \(env.CIRCLE_BUILD_URL) for more details. ",
        "outcome": "failed",
        "username": env.CIRCLE_USERNAME,
        "details": {
          "build_number":env.CIRCLE_PREVIOUS_BUILD_NUM,
          "build_url": env.CIRCLE_BUILD_URL
          }
      }' > /tmp/raw-webhook.json
    name: Bundle build info into webhook payload
    when: on_fail
- run:
    command: |
      '{
          "user":"CI Orb",
          "source":"CI Orb",
          "note":"Succesful pass: close alerts",
          "details": {
              "outcome": "success"
            }
      }' > /tmp/raw-webhook.json
    name: Bundle build info into webhook payload
    when: on_success
- run:
  # Can not evaluate bash variables on ci conditional; must set inside command
    command: |
      if [ -n "${USER_EMAIL}" ]; then
        cat /tmp/raw-webhook.json | jq --arg USER_EMAIL $USER_EMAIL \
        '.responders += [{"username": "'$USER_EMAIL'", "type": "user"}, {"name": "ci_alerts", "type": "team"}]'> /tmp/webhook_temp.json
        mv /tmp/webhook_temp.json /tmp/raw-webhook.json
      fi
    name: Add user email to Webhook
    when: on_fail
- run:
    command: |
      if [ -n "${DIFF_URL}" ]; then
        cat /tmp/raw-webhook.json | jq --arg DIFF_URL $DIFF_URL '.description +=  " Compare with last passing commit: '$DIFF_URL'"' > /tmp/webhook_temp.json
        mv /tmp/webhook_temp.json /tmp/raw-webhook.json
      fi
    name: Add latest git hash to Webhook
    when: on_fail
- when:
    condition: <<parameters.on_success>>
    steps:
    - run:
        command: |
          alias="(env.CIRCLE_PROJECT_REPONAME)%2F(env.CIRCLE_BRANCH)%23(env.CIRCLE_JOB)"
          echo "https://api.opsgenie.com/v2/alerts/${alias}/close"
          cat /tmp/raw-webhook.json
          curl -X POST -H"Content-Type:application/json" -H "Authorization: GenieKey ${OPS_GENIE_API_KEY}" -d @/tmp/webhook.json "https://api.opsgenie.com/v2/alerts/${alias}/close"
        name: Notify $<<parameters.endpoint>> with Success Webhook
        when: on_success
- when:
    condition: <<parameters.on_failure>>
    steps:
    - run:
        command: |
          curl -X POST -H"Content-Type:application/json" -H "Authorization: GenieKey ${OPS_GENIE_API_KEY}" -d @/tmp/webhook.json https://api.opsgenie.com/v2/alerts
        name: Notify $<<parameters.endpoint>> with Failure Webhook
        when: on_fail
