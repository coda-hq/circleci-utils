description: Send build results to Opsgenie API, with detailed information
parameters:
  endpoint:
    default: OPSGENIE_WEBHOOK
    description: Enter either your Full URL value that you copied in Opsgenie
      Integration Page
    type: string
  on_failure:
    default: false
    description: Failure information of circleci build
    type: boolean
  on_success:
    default: true
    description: Success information of circleci build
    type: boolean
  CODA_API_TOKEN:
    default: $STAGING_CODA_TOKEN
    description: |
      Env var of a token granted read access to the CODA_USER_ROSTER_TABLE_URL document.
    type: string
  CIRCLE_TOKEN:
    default: $CIRCLECI_TOKEN
    description: |
      Env var of a token granted read access to the CircleCI api
    type: string
steps:
- run:
    name: Fetch User Information
    when: always
    command: <<include(scripts/fetch_user_handles.sh)>>
    environment:
      CODA_API_TOKEN: << parameters.CODA_API_TOKEN >>
- run:
    name: Get diff url
    when: on_fail
    command: <<include(scripts/get_lkg_hash.sh)>>
    environment:
      CIRCLE_TOKEN: << parameters.CIRCLE_TOKEN >>
- run:
    command: |
      echo '{}' | jq '{
        "message": "[CircleCI] [#\(env.CIRCLE_PREVIOUS_BUILD_NUM)]: workflow \(env.CIRCLE_BRANCH) stage \(env.CIRCLE_STAGE) job \(env.CIRCLE_JOB)",
        "alias": "\(env.CIRCLE_PROJECT_REPONAME)/\(env.CIRCLE_BRANCH)#\(env.CIRCLE_JOB) ",
        "description":"See \(env.CIRCLE_BUILD_URL) for more details. ",
        "outcome": "unknown",
        "username": env.CIRCLE_USERNAME,
        "details": {
          "build_number":env.CIRCLE_PREVIOUS_BUILD_NUM,
          "build_url": env.CIRCLE_BUILD_URL
          },
        "tags": ["TestingAlerts"],
      }' > /tmp/raw-webhook.json
    name: Bundle build info into webhook payload
    when: always
- when:
    condition: $USER_EMAIL
    steps:
    - run:
        command: |
          cat /tmp/raw-webhook.json | jq --arg USER_EMAIL $USER_EMAIL '.responders +=  [{"username":$USER_EMAIL, "type":"user"}]' > /tmp/webhook2.json
          cp /tmp/webhook2.json /tmp/raw-webhook.json
        name: Add user email to Webhook
- when:
    condition: $DIFF_URL
    steps:
    - run:
        command: |
          cat /tmp/raw-webhook.json | jq --arg DIFF_URL $DIFF_URL '.description +=  " Compare with last passing commit: '$DIFF_URL'"' > /tmp/raw-webhook2.json
          cp /tmp/raw-webhook2.json /tmp/raw-webhook.json
        name: Add latest git hash to Webhook
- when:
    condition: <<parameters.on_success>>
    steps:
    - run:
        command: |
          cat /tmp/raw-webhook.json | jq '.payload.outcome="success"' > /tmp/webhook.json
          curl -X POST -H"Content-Type:application/json" -H "Authorization: GenieKey ${OPS_GENIE_API_KEY}" -d @/tmp/webhook.json https://api.opsgenie.com/v2/alerts
        name: Notify $<<parameters.endpoint>> with Success Webhook
        when: on_success
- when:
    condition: <<parameters.on_failure>>
    steps:
    - run:
        command: |
          cat /tmp/raw-webhook.json | jq '.payload.outcome="failed"'  > /tmp/webhook.json
          curl -X POST -H"Content-Type:application/json" -H "Authorization: GenieKey ${OPS_GENIE_API_KEY}" -d @/tmp/webhook.json https://api.opsgenie.com/v2/alerts
        name: Notify $<<parameters.endpoint>> with Failure Webhook
        when: on_fail