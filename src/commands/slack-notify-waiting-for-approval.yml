description: |
  Notifies the current workflow owner that their workflow is pending approval to proceed.
  Depends on jq being present.

  Setup:
    1. Create Coda document with a table containing columns `circleci alias` (ex: github username) and `email`, and populate this table with information for each github user.
    3. Find the docId, tableId, and columnIds for the circleci user alias and email columnIds.
    4. Create a Coda API token for this document at https://coda.io/account - limit the token to read access to the target table.
    5. Setup a Slack Bot account with scopes `users:read`, `users:read.email`, and `chat:write`.
    6. Configure orb based on required args
parameters:
  CODA_USER_ROSTER_TABLE_URL:
    description: |
      Fully qualified API URL to a table containing CIRCLECI_USERNAMEs to email aliases.    Must be of the form
      https://coda.io/apis/v1/docs/<DOCID>/tables/<TABLEID>/rows.
    type: string
    default: https://staging.coda.io/apis/v1/docs/s2i6oFeghW/tables/grid-QGyaiXZDwu/rows
  CODA_API_TOKEN:
    description: |
      Env var of a token granted read access to the CODA_USER_ROSTER_TABLE_URL document.
    type: string
  CODA_CIRCLECI_USER_NAME_COL:
    description: |
      Coda columnId of the column storing the CircleCI username.
    type: string
    default: c-6ni4kHGNwE
  CODA_CIRCLECI_USER_ALIAS_COL:
    description: |
      Coda columnId of the column storing the user alias (when using EMAIL_DOMAIN), or fully qualified email.
    type: string
    default: c-26If9Zttyp
  EMAIL_DOMAIN:
    description: |
      Optional email domain for users within the workspace.   Must be specified if user aliases are not fully qualified.
    type: string
    default: coda.io
  SLACK_BOT_TOKEN:
    type: string
    description: |
      Token used by Slack bot application.   Must have scopes `users:read`, `users:read.email`, and `chat:write`.
  vcs:
    description: |
      Defaults to "gh", but allows other version control systems.
    type: string
    default: gh
steps:
  - run:
      name: Fetch Slack Handle For Github Handle
      command: |
        set -eo pipefail

        USER_ALIAS=$(curl -s -H "Authorization: Bearer << parameters.CODA_API_TOKEN >>" \
          -G --data-urlencode "query=<< parameters.CODA_CIRCLECI_USER_NAME_COL >>:\"${CIRCLE_USERNAME}\"" \
          '<< parameters.CODA_USER_ROSTER_TABLE_URL >>' \
          | jq '.items[0].values."<< parameters.CODA_CIRCLECI_USER_ALIAS_COL >>"' | tr -d '"')
        USER_EMAIL=$([[ "${USER_ALIAS}" == *@* ]] && echo "$USER_ALIAS" || echo "${USER_ALIAS}@<< parameters.EMAIL_DOMAIN >>")
        SLACK_USER_ID=$(curl -s -H "Authorization: Bearer << parameters.SLACK_BOT_TOKEN >>" \
          https://slack.com/api/users.lookupByEmail?email=${USER_EMAIL} \
          | jq '.user.id' | tr -d '"')

        curl -X POST -H "Authorization: Bearer << parameters.SLACK_BOT_TOKEN >>" \
          -H "Content-Type: application/json" -d \
          "{ \
            \"channel\": \"${SLACK_USER_ID}\", \
            \"attachments\": [ \
              { \
                \"text\": \"Pending Approval for ${CIRCLE_PROJECT_REPONAME} push (${CIRCLE_USERNAME})\", \
                \"fields\": [ \
                  { \
                    \"title\": \"Project\", \
                    \"value\": \"${CIRCLE_PROJECT_REPONAME}\", \
                    \"short\": true \
                  }, \
                  { \
                    \"title\": \"Job Number\", \
                    \"value\": \"${CIRCLE_BUILD_NUM}\", \
                    \"short\": true \
                  } \
                ], \
                \"actions\": [ \
                  { \
                    \"type\": \"button\", \
                    \"text\": \"Visit Workflow\", \
                    \"url\": \"https://circleci.com/workflow-run/${CIRCLE_WORKFLOW_ID}\" \
                  } \
                ], \
                \"color\": \"#f46a54\" \
              } \
            ] \
          }" \
          'https://slack.com/api/chat.postMessage'