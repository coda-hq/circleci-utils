version: 2.1
description: |
    Sample orb description
display:
    home_url: https://www.website.com/docs
    source_url: https://www.github.com/EXAMPLE_ORG/EXAMPLE_PROJECT
commands:
    cancel-older-awaiting-approvals:
        description: |
            Cancel all older pipelines waiting on manual approval.
            Depends on jq being present.
        parameters:
            token:
                description: |
                    The env var containing CircleCI API token that can read builds for the project (either a user or project API token will work).
                    Pass this as a literal string such as `$CIRCLE_TOKEN`.
                    Do not paste the actual token into your configuration.
                type: string
            vcs:
                default: gh
                description: |
                    Defaults to "gh", but allows other version control systems.
                type: string
        steps:
            - run:
                command: |-
                    set -eo pipefail

                    BASE_URL="https://circleci.com/api/v2"
                    TOKEN="circle-token=<< parameters.token >>"

                    CURRENT_WORKFLOW=$(curl -s -H "Accept: application/json" "${BASE_URL}/workflow/${CIRCLE_WORKFLOW_ID}?${TOKEN}")
                    CURRENT_WORKFLOW_TIMESTAMP=$(echo $CURRENT_WORKFLOW | jq -r ".created_at")
                    echo "Current workflow start time: ${CURRENT_WORKFLOW_TIMESTAMP}"

                    PROJECT_SLUG="project/<< parameters.vcs >>%2F${CIRCLE_PROJECT_USERNAME}%2F${CIRCLE_PROJECT_REPONAME}"
                    PIPELINE_IDS=$(curl -s -H "Accept: application/json" "${BASE_URL}/${PROJECT_SLUG}/pipeline?${TOKEN}" | jq -r ".items[].id")

                    for PIPELINE_ID in $PIPELINE_IDS; do
                      WORKFLOW=$(curl -s -H "Accept: application/json" "${BASE_URL}/pipeline/${PIPELINE_ID}/workflow?${TOKEN}" | jq ".items[0]")

                      WORKFLOW_ID=$(echo $WORKFLOW | jq -r ".id")
                      WORKFLOW_STATUS=$(echo $WORKFLOW | jq -r ".status")
                      WORKFLOW_CREATION_TIMESTAMP=$(echo $WORKFLOW | jq -r ".created_at")

                      echo "Workflow data: ${WORKFLOW_ID}, ${WORKFLOW_STATUS}, ${WORKFLOW_CREATION_TIMESTAMP}"

                      if [[ $WORKFLOW_CREATION_TIMESTAMP < $CURRENT_WORKFLOW_TIMESTAMP && "$WORKFLOW_STATUS" == "on_hold" ]]; then
                        echo "Canceling older workflow waiting for manual approval: ${WORKFLOW_ID}"
                        curl -s -X POST -H "Accept: application/json" "${BASE_URL}/workflow/${WORKFLOW_ID}/cancel?${TOKEN}"
                      fi
                    done
                name: Cancel older pipelines waiting on manual approval.
    grab-email:
        description: |
            This command grabs a codan email from CircleCI Username and sets it as USER_EMAIL
        parameters:
            CODA_API_TOKEN:
                default: CODA_API_TOKEN
                description: |
                    Env var of a token granted read access to the CODA_USER_ROSTER_TABLE_URL document.
                type: env_var_name
            CODA_CIRCLECI_USER_ALIAS_COL:
                default: c-26If9Zttyp
                description: |
                    Coda columnId of the column storing the user alias (when using EMAIL_DOMAIN), or fully qualified email.
                type: string
            CODA_CIRCLECI_USER_NAME_COL:
                default: c-6ni4kHGNwE
                description: |
                    Coda columnId of the column storing the CircleCI username.
                type: string
            CODA_USER_ROSTER_TABLE_URL:
                default: https://staging.coda.io/apis/v1/docs/s2i6oFeghW/tables/grid-QGyaiXZDwu/rows
                description: |
                    Fully qualified API URL to a table containing CIRCLECI_USERNAMEs to email aliases.    Must be of the form
                    https://coda.io/apis/v1/docs/<DOCID>/tables/<TABLEID>/rows.
                type: string
            EMAIL_DOMAIN:
                default: coda.io
                description: |
                    Optional email domain for users within the workspace.   Must be specified if user aliases are not fully qualified.
                type: string
        steps:
            - run:
                command: |-
                    set -eo pipefail
                    USER_ALIAS=$(curl -s -H "Authorization: Bearer ${CODA_API_TOKEN}" \
                    -G --data-urlencode "query=c-6ni4kHGNwE:\"${CIRCLE_USERNAME}\"" \
                    'https://staging.coda.io/apis/v1/docs/s2i6oFeghW/tables/grid-QGyaiXZDwu/rows' \
                    | jq '.items[0].values."c-26If9Zttyp"' | tr -d '"')
                    if [ $USER_ALIAS != "null" ]; then
                      USER_EMAIL=$([[ "${USER_ALIAS}" == *@* ]] && echo "$USER_ALIAS" || echo "${USER_ALIAS}@coda.io")
                      echo "export USER_EMAIL=${USER_EMAIL}" >> $BASH_ENV
                    else
                      echo "export USER_EMAIL=''" >> $BASH_ENV
                    fi
                name: Get User Email
    lkg:
        description: Get lkg script
        steps:
            - run:
                command: "#!/bin/bash\nCIRCLE_FETCH_PAGE_SIZE=100\nCIRCLE_FETCH_MAX_PAGES=100\nresponse=\"\"\nfunction get_recent_builds() {\n    offset=$(($1*$CIRCLE_FETCH_PAGE_SIZE))\n    url=\"https://circleci.com/api/v1/project/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}/tree/${CIRCLE_BRANCH}?circle-token=${CIRCLE_LOCK_API_TOKEN}&limit=100&offset=${offset}&filter=successful\"\n    response=$(curl $url | jq '.')\n}\n\n\nlatest_build_num=0\nlatest_git_hash=\"\"\njob_name=$CIRCLE_JOB\npage=0\nwhile [[ $latest_git_hash == \"\" ]] && [[ $page < $CIRCLE_FETCH_MAX_PAGES ]]\ndo\n    IFS=$'\\n'\n    get_recent_builds $page\n    for build in $(echo $response | jq -c '.[]')\n    do\n        if [[ $(echo $build | jq -r '.outcome') != \"success\" ]]; then\n            continue\n        fi\n        # To Do: Change to jq instead of grep?\n        if [[ $(echo $build | grep 'workflows') == \"\" ]]; then \n            continue \n        fi \n        if (( $(echo $build | jq  -r '.build_num') > $latest_build_num ))\\\n        && [[ $(echo $build | jq -r '.workflows.job_name') == $job_name ]]; then\n            latest_build_num=$(echo $build | jq -r '.build_num') \n            latest_git_hash=$(echo $build | jq -r '.vcs_revision')\n        fi\n    done\n    if [ -z $latest_git_hash ]; then\n        page=$((page+1))\n    fi\n    DIFF_URL=\"https://github.com/kr-project/${CIRCLE_PROJECT_REPONAME}/compare/${latest_git_hash}...${CIRCLE_SHA1}\"\n    # echo \"export LATEST_GIT_HASH=$latest_git_hash\" >> $BASH_ENV\n    echo \"export LATEST_GIT_HASH=$DIFF_URL\" >> $BASH_ENV\n    source $BASH_ENV\ndone\n\n"
                name: Get diff url
    notify:
        description: Send build results to Opsgenie API, with detailed information
        parameters:
            CODA_API_TOKEN:
                default: CODA_API_TOKEN
                description: |
                    Env var of a token granted read access to the CODA_USER_ROSTER_TABLE_URL document.
                type: env_var_name
            CODA_CIRCLECI_USER_ALIAS_COL:
                default: c-26If9Zttyp
                description: |
                    Coda columnId of the column storing the user alias (when using EMAIL_DOMAIN), or fully qualified email.
                type: string
            CODA_CIRCLECI_USER_NAME_COL:
                default: c-6ni4kHGNwE
                description: |
                    Coda columnId of the column storing the CircleCI username.
                type: string
            CODA_USER_ROSTER_TABLE_URL:
                default: https://staging.coda.io/apis/v1/docs/s2i6oFeghW/tables/grid-QGyaiXZDwu/rows
                description: |
                    Fully qualified API URL to a table containing CIRCLECI_USERNAMEs to email aliases.    Must be of the form
                    https://coda.io/apis/v1/docs/<DOCID>/tables/<TABLEID>/rows.
                type: string
            EMAIL_DOMAIN:
                default: coda.io
                description: |
                    Optional email domain for users within the workspace.   Must be specified if user aliases are not fully qualified.
                type: string
            diff_url:
                default: ""
                description: Last known good commit
                type: string
            email:
                default: ""
                description: Email of Coda to be added
                type: string
            endpoint:
                default: OPSGENIE_WEBHOOK
                description: Enter either your Full URL value that you copied in Opsgenie Integration Page
                type: env_var_name
            on_failure:
                default: false
                description: Failure information of circleci build
                type: boolean
            on_success:
                default: true
                description: Success information of circleci build
                type: boolean
        steps:
            - run:
                command: |
                    set -eo pipefail
                    USER_ALIAS=$(curl -s -H "Authorization: Bearer ${CODA_API_TOKEN}" \
                    -G --data-urlencode "query=c-6ni4kHGNwE:\"${CIRCLE_USERNAME}\"" \
                    'https://staging.coda.io/apis/v1/docs/s2i6oFeghW/tables/grid-QGyaiXZDwu/rows' \
                    | jq '.items[0].values."c-26If9Zttyp"' | tr -d '"')
                    if [ $USER_ALIAS != "null" ]; then
                      USER_EMAIL=$([[ "${USER_ALIAS}" == *@* ]] && echo "$USER_ALIAS" || echo "${USER_ALIAS}@coda.io")
                      echo "export USER_EMAIL=${USER_EMAIL}" >> $BASH_ENV
                    else
                      echo "export USER_EMAIL=''" >> $BASH_ENV
                    fi
                    echo  $USER_EMAIL
                    source $BASH_ENV
                name: Get User Email
                when: always
            - run:
                command: "#!/bin/bash\nCIRCLE_FETCH_PAGE_SIZE=100\nCIRCLE_FETCH_MAX_PAGES=100\nresponse=\"\"\nfunction get_recent_builds() {\n    offset=$(($1*$CIRCLE_FETCH_PAGE_SIZE))\n    url=\"https://circleci.com/api/v1/project/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}/tree/${CIRCLE_BRANCH}?circle-token=${CIRCLE_LOCK_API_TOKEN}&limit=100&offset=${offset}&filter=successful\"\n    response=$(curl $url | jq '.')\n}\n\n\nlatest_build_num=0\nlatest_git_hash=\"\"\njob_name=$CIRCLE_JOB\npage=0\nwhile [[ $latest_git_hash == \"\" ]] && [[ $page < $CIRCLE_FETCH_MAX_PAGES ]]\ndo\n    IFS=$'\\n'\n    get_recent_builds $page\n    for build in $(echo $response | jq -c '.[]')\n    do\n        if [[ $(echo $build | jq -r '.outcome') != \"success\" ]]; then\n            continue\n        fi\n        # To Do: Change to jq instead of grep?\n        if [[ $(echo $build | grep 'workflows') == \"\" ]]; then \n            continue \n        fi \n        if (( $(echo $build | jq  -r '.build_num') > $latest_build_num ))\\\n        && [[ $(echo $build | jq -r '.workflows.job_name') == $job_name ]]; then\n            latest_build_num=$(echo $build | jq -r '.build_num') \n            latest_git_hash=$(echo $build | jq -r '.vcs_revision')\n        fi\n    done\n    if [ -z $latest_git_hash ]; then\n        page=$((page+1))\n    fi\n    DIFF_URL=\"https://github.com/kr-project/${CIRCLE_PROJECT_REPONAME}/compare/${latest_git_hash}...${CIRCLE_SHA1}\"\n    # echo \"export LATEST_GIT_HASH=$latest_git_hash\" >> $BASH_ENV\n    echo \"export LATEST_GIT_HASH=$DIFF_URL\" >> $BASH_ENV\n    source $BASH_ENV\ndone\n\n"
                name: Get diff url
                when: always
            - run:
                command: echo $LATEST_GIT_HASH
                name: Test diff url
                when: always
            - run:
                command: |
                    echo '{}' | jq '{
                      "message": "[CircleCI] [#\(env.CIRCLE_PREVIOUS_BUILD_NUM)]: workflow \(env.CIRCLE_BRANCH) stage \(env.CIRCLE_STAGE) job \(env.CIRCLE_JOB)",
                      "alias": "\(env.CIRCLE_PROJECT_REPONAME)/\(env.CIRCLE_BRANCH)#\(env.CIRCLE_JOB)",
                      "description":"See \(env.CIRCLE_BUILD_URL) for more details. ",
                      "outcome": "unknown",
                      "username": env.CIRCLE_USERNAME,
                      "details": {
                        "build_number":env.CIRCLE_PREVIOUS_BUILD_NUM,
                        "build_url": env.CIRCLE_BUILD_URL
                        }
                    }' > /tmp/raw-webhook.json
                    cat /tmp/raw-webhook.json
                name: Bundle build info into webhook payload
                when: always
            - when:
                condition: $USER_EMAIL
                steps:
                    - run:
                        command: |
                            cat /tmp/raw-webhook.json | jq --arg USER_EMAIL $USER_EMAIL '.responders +=  [{"username":$USER_EMAIL, "type":"user"}]' > /tmp/webhook2.json
                            cp /tmp/webhook2.json /tmp/raw-webhook.json
                            cat /tmp/raw-webhook.json
                        name: Add user email to Webhook
                        when: on_fail
            - when:
                condition: $LATEST_GIT_HASH
                steps:
                    - run:
                        command: |
                            cat /tmp/raw-webhook.json | jq --arg LATEST_GIT_HASH $LATEST_GIT_HASH '.message +=  "Compare URL: '$LATEST_GIT_HASH'"' > /tmp/raw-webhook2.json
                            cp /tmp/raw-webhook2.json /tmp/raw-webhook.json
                            cat /tmp/raw-webhook.json
                        name: Add latest git hash to Webhook
                        when: on_fail
            - when:
                condition: <<parameters.on_success>>
                steps:
                    - run:
                        command: |
                            cat /tmp/raw-webhook.json | jq '.payload.outcome="success"' > /tmp/webhook.json
                            curl -X POST -H"Content-Type:application/json" -H "Authorization: GenieKey ${OPS_GENIE_API_KEY}" -d @/tmp/webhook.json https://api.opsgenie.com/v2/alerts
                        name: Notify $<<parameters.endpoint>> with Success Webhook
                        when: on_success
            - when:
                condition: <<parameters.on_failure>>
                steps:
                    - run:
                        command: |
                            cat /tmp/raw-webhook.json
                            cat /tmp/raw-webhook.json | jq '.payload.outcome="failed"'  > /tmp/webhook.json
                            curl -X POST -H"Content-Type:application/json" -H "Authorization: GenieKey ${OPS_GENIE_API_KEY}" -d @/tmp/webhook.json https://api.opsgenie.com/v2/alerts
                        name: Notify $<<parameters.endpoint>> with Failure Webhook
                        when: on_fail
    slack-notify-waiting-for-approval:
        description: |
            Notifies the current workflow owner that their workflow is pending approval to proceed.
            Depends on jq being present.

            Setup:
              1. Create Coda document with a table containing columns `circleci alias` (ex: github username) and `email`, and populate this table with information for each github user.
              3. Find the docId, tableId, and columnIds for the circleci user alias and email columnIds.
              4. Create a Coda API token for this document at https://coda.io/account - limit the token to read access to the target table.
              5. Setup a Slack Bot account with scopes `users:read`, `users:read.email`, and `chat:write`.
              6. Configure orb based on required args
        parameters:
            CODA_API_TOKEN:
                description: |
                    Env var of a token granted read access to the CODA_USER_ROSTER_TABLE_URL document.
                type: string
            CODA_CIRCLECI_USER_ALIAS_COL:
                default: c-26If9Zttyp
                description: |
                    Coda columnId of the column storing the user alias (when using EMAIL_DOMAIN), or fully qualified email.
                type: string
            CODA_CIRCLECI_USER_NAME_COL:
                default: c-6ni4kHGNwE
                description: |
                    Coda columnId of the column storing the CircleCI username.
                type: string
            CODA_USER_ROSTER_TABLE_URL:
                default: https://staging.coda.io/apis/v1/docs/s2i6oFeghW/tables/grid-QGyaiXZDwu/rows
                description: |
                    Fully qualified API URL to a table containing CIRCLECI_USERNAMEs to email aliases.    Must be of the form
                    https://coda.io/apis/v1/docs/<DOCID>/tables/<TABLEID>/rows.
                type: string
            EMAIL_DOMAIN:
                default: coda.io
                description: |
                    Optional email domain for users within the workspace.   Must be specified if user aliases are not fully qualified.
                type: string
            SLACK_BOT_TOKEN:
                description: |
                    Token used by Slack bot application.   Must have scopes `users:read`, `users:read.email`, and `chat:write`.
                type: string
            vcs:
                default: gh
                description: |
                    Defaults to "gh", but allows other version control systems.
                type: string
        steps:
            - run:
                command: |-
                    set -eo pipefail

                    USER_ALIAS=$(curl -s -H "Authorization: Bearer << parameters.CODA_API_TOKEN >>" \
                      -G --data-urlencode "query=<< parameters.CODA_CIRCLECI_USER_NAME_COL >>:\"${CIRCLE_USERNAME}\"" \
                      '<< parameters.CODA_USER_ROSTER_TABLE_URL >>' \
                      | jq '.items[0].values."<< parameters.CODA_CIRCLECI_USER_ALIAS_COL >>"' | tr -d '"')
                    USER_EMAIL=$([[ "${USER_ALIAS}" == *@* ]] && echo "$USER_ALIAS" || echo "${USER_ALIAS}@<< parameters.EMAIL_DOMAIN >>")
                    SLACK_USER_ID=$(curl -s -H "Authorization: Bearer << parameters.SLACK_BOT_TOKEN >>" \
                      https://slack.com/api/users.lookupByEmail?email=${USER_EMAIL} \
                      | jq '.user.id' | tr -d '"')

                    curl -X POST -H "Authorization: Bearer << parameters.SLACK_BOT_TOKEN >>" \
                      -H "Content-Type: application/json" -d \
                      "{ \
                        \"channel\": \"${SLACK_USER_ID}\", \
                        \"attachments\": [ \
                          { \
                            \"text\": \"Pending Approval for ${CIRCLE_PROJECT_REPONAME} push (${CIRCLE_USERNAME})\", \
                            \"fields\": [ \
                              { \
                                \"title\": \"Project\", \
                                \"value\": \"${CIRCLE_PROJECT_REPONAME}\", \
                                \"short\": true \
                              }, \
                              { \
                                \"title\": \"Job Number\", \
                                \"value\": \"${CIRCLE_BUILD_NUM}\", \
                                \"short\": true \
                              } \
                            ], \
                            \"actions\": [ \
                              { \
                                \"type\": \"button\", \
                                \"text\": \"Visit Workflow\", \
                                \"url\": \"https://circleci.com/workflow-run/${CIRCLE_WORKFLOW_ID}\" \
                              } \
                            ], \
                            \"color\": \"#f46a54\" \
                          } \
                        ] \
                      }" \
                      'https://slack.com/api/chat.postMessage'
                name: Fetch Slack Handle For Github Handle
executors:
    default:
        description: |
            Default executor
        docker:
            - image: circleci/buildpack-deps:buster-curl
jobs:
    cancel-older-awaiting-approvals:
        description: |
            Cancel all older pipelines waiting on manual approval.
            Depends on jq being present.
        executor: default
        parameters:
            token:
                description: |
                    The env var containing CircleCI API token that can read builds for the project (either a user or project API token will work).
                    Pass this as a literal string such as `$CIRCLE_TOKEN`.
                    Do not paste the actual token into your configuration.
                type: string
            vcs:
                default: gh
                description: |
                    Defaults to "gh", but allows other version control systems.
                type: string
        steps:
            - cancel-older-awaiting-approvals:
                token: << parameters.token >>
                vcs: << parameters.vcs >>
    notify-opsgenie:
        description: |
            Notify opsgenie through API of circleci failure/success
        executor: default
        parameters:
            CODA_API_TOKEN:
                description: |
                    Env var of a token granted read access to the CODA_USER_ROSTER_TABLE_URL document.
                type: string
            CODA_CIRCLECI_USER_ALIAS_COL:
                default: c-26If9Zttyp
                description: |
                    Coda columnId of the column storing the user alias (when using EMAIL_DOMAIN), or fully qualified email.
                type: string
            CODA_CIRCLECI_USER_NAME_COL:
                default: c-6ni4kHGNwE
                description: |
                    Coda columnId of the column storing the CircleCI username.
                type: string
            CODA_USER_ROSTER_TABLE_URL:
                default: https://staging.coda.io/apis/v1/docs/s2i6oFeghW/tables/grid-QGyaiXZDwu/rows
                description: |
                    Fully qualified API URL to a table containing CIRCLECI_USERNAMEs to email aliases.    Must be of the form
                    https://coda.io/apis/v1/docs/<DOCID>/tables/<TABLEID>/rows.
                type: string
            EMAIL_DOMAIN:
                default: coda.io
                description: |
                    Optional email domain for users within the workspace.   Must be specified if user aliases are not fully qualified.
                type: string
        steps:
            - grab-email:
                CODA_API_TOKEN: << parameters.CODA_API_TOKEN >>
                CODA_CIRCLECI_USER_ALIAS_COL: << parameters.CODA_CIRCLECI_USER_ALIAS_COL >>
                CODA_CIRCLECI_USER_NAME_COL: << parameters.CODA_CIRCLECI_USER_NAME_COL >>
                CODA_USER_ROSTER_TABLE_URL: << parameters.CODA_USER_ROSTER_TABLE_URL >>
                EMAIL_DOMAIN: << parameters.EMAIL_DOMAIN >>
            - lkg
            - notify:
                diff_url: $LATEST_GIT_HASH
                email: $USER_EMAIL
                on_failure: true
    slack-notify-waiting-for-approval:
        description: |
            Notifies the current workflow owner that their workflow is pending approval to proceed.
            Depends on jq being present.

            Setup:
              1. Create Coda document with a table containing columns `circleci alias` (ex: github username) and `email`, and populate this table with information for each github user.
              3. Find the docId, tableId, and columnIds for the circleci user alias and email columnIds.
              4. Create a Coda API token for this document at https://coda.io/account - limit the token to read access to the target table.
              5. Setup a Slack Bot account with scopes `users:read`, `users:read.email`, and `chat:write`.
              6. Configure orb based on required args
        executor: default
        parameters:
            CODA_API_TOKEN:
                description: |
                    Env var of a token granted read access to the CODA_USER_ROSTER_TABLE_URL document.
                type: string
            CODA_CIRCLECI_USER_ALIAS_COL:
                default: c-26If9Zttyp
                description: |
                    Coda columnId of the column storing the user alias (if using EMAIL_DOMAIN), or fully qualified email.
                type: string
            CODA_CIRCLECI_USER_NAME_COL:
                default: c-6ni4kHGNwE
                description: |
                    Coda columnId of the column storing the CircelCI username (typically github alias).
                type: string
            CODA_USER_ROSTER_TABLE_URL:
                default: https://staging.coda.io/apis/v1/docs/s2i6oFeghW/tables/grid-QGyaiXZDwu/rows
                description: |
                    Fully qualified API URL to a table containing CIRCLECI_USERNAME to email aliases.    Must be of the form
                    https://coda.io/apis/v1/docs/<DOCID>/tables/<TABLEID>/rows.
                type: string
            EMAIL_DOMAIN:
                default: coda.io
                description: |
                    Optional email domain for users within the workspace.   Must be specified if user aliases are not fully qualified.
                type: string
            SLACK_BOT_TOKEN:
                description: |
                    Token used by Slack bot application.   Must have scopes `users:read`, `users:read.email`, and `chat:write`.
                type: string
            vcs:
                default: gh
                description: |
                    Defaults to "gh", but allows other version control systems.
                type: string
        steps:
            - slack-notify-waiting-for-approval:
                CODA_API_TOKEN: << parameters.CODA_API_TOKEN >>
                CODA_CIRCLECI_USER_ALIAS_COL: << parameters.CODA_CIRCLECI_USER_ALIAS_COL >>
                CODA_CIRCLECI_USER_NAME_COL: << parameters.CODA_CIRCLECI_USER_NAME_COL >>
                CODA_USER_ROSTER_TABLE_URL: << parameters.CODA_USER_ROSTER_TABLE_URL >>
                EMAIL_DOMAIN: << parameters.EMAIL_DOMAIN >>
                SLACK_BOT_TOKEN: << parameters.SLACK_BOT_TOKEN >>
                vcs: << parameters.vcs >>
examples:
    example:
        description: |
            Sample example description.
        usage:
            version: "2.1"
            orbs:
                <orb-name>: <namespace>/<orb-name>@1.2.3
            workflows:
                use-my-orb:
                    jobs:
                        - <orb-name>/<job-name>

